version: '3'

services:
  broker-service:
    build:
      # Need to set context because docker-compose file is in project dir
      # Set path to the Dockerfile in broker-service dir
      context: ./../broker-service
      dockerfile: ./../broker-service/broker-service.dockerfile
    # Always attempt to restart if it dies because it keeps failing
    restart: always
    # Broker service will be accessible from localhost port 8080
    ports:
    - "8080:80"
    deploy:
      # Deploy only 1 service for now because only 1 container can be mapped to localhost 8080 (unless using service discovery)
      mode: replicated
      replicas: 1

  logger-service:
    build:
      context: ./../logger-service
      dockerfile: ./../logger-service/logger-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1

  listener-service:
    build:
      context: ./../listener-service
      dockerfile: ./../listener-service/listener-service.dockerfile
    restart: always
    
  mail-service:
    build:
      context: ./../mail-service
      dockerfile: ./../mail-service/mail-service.dockerfile
    restart: always
    environment:
      MAIL_DOMAIN: localhost
      MAIL_HOST: mailhog # correspond to the mailhog docker service name
      MAIL_PORT: 1025
      MAIL_ENCRYPTION: none
      MAIL_USERNAME: ""
      MAIL_PASSWORD: ""
      FROM_NAME: "John Smith" # Default from name if not specified
      FROM_ADDRESS: "john.smith@example.com" # Default from email address if not specified
  authentication-service:
    build:
      context: ./../authentication-service
      dockerfile: ./../authentication-service/authentication-service.dockerfile
    restart: always
    ports:
    - "8081:80"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      # Connect to docker service named postgres
      DSN: "host=postgres port=5432 user=postgres password=password dbname=users sslmode=disable timezone=UTC connect_timeout=5"

  postgres:
    image: "postgres:14.2"
    ports:
    - "5432:5432"
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: users
    volumes:
    - ./db-data/postgres:/var/lib/postgresql/data/
  

  mongo:
    image: "mongo:4.2.16-bionic"
    ports:
    - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: logs
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
    - ./db-data/mongo/:/data/db

  mailhog:
    image: "mailhog/mailhog:latest"
    ports:
    - "1025:1025" # might not be used
    - "8025:8025" # this is the UI for mailhog, definitely going to be used

  rabbitmq:
    image: "rabbitmq:3.9-alpine" # there's an image version with UI management (there's management inside the image name)
    ports:
    - "5672:5672" 
    volumes:
      - ./db-data/rabbitmq/:/var/lib/rabbitmq/
